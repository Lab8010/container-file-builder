// Dockerfileプレビューと生成機能

// Containerfileテキストを生成
function generateDockerfile() {
    const canvas = document.getElementById('canvas');
    const canvasBlocks = canvas.querySelectorAll('.canvas-block');
    
    const lang = typeof getCurrentLanguage === 'function' ? getCurrentLanguage() : 'ja';
    const runtime = typeof getCurrentRuntime === 'function' ? getCurrentRuntime() : 'podman';
    
    if (canvasBlocks.length === 0) {
        return typeof t === 'function' ? t('empty_preview') : '# ここにContainerfileが表示されます\n# 左側のブロックをキャンバスに追加してください';
    }
    
    let dockerfile = '# ' + (typeof t === 'function' ? t('generated_by') : 'Generated by Container File Builder') + '\n';
    dockerfile += '# ' + (typeof t === 'function' ? t('created_at') : 'Created at:') + ' ' + new Date().toLocaleString(lang === 'ja' ? 'ja-JP' : 'en-US') + '\n';
    dockerfile += '# Runtime: ' + (runtime === 'podman' ? 'Podman (Red Hat recommended)' : 'Docker') + '\n\n';
    
    canvasBlocks.forEach((block, index) => {
        const blockId = block.dataset.blockId;
        const blockType = block.dataset.blockType;
        const blockData = canvasBlocksData[blockId];
        
        if (blockData) {
            const def = blockDefinitions[blockType];
            const line = def.generate(blockData.values);
            dockerfile += line + '\n';
        }
    });
    
    // ビルド・実行コマンドを追加
    if (typeof getBuildRunCommands === 'function') {
        dockerfile += '\n# ' + (lang === 'ja' ? 'ビルドと実行' : 'Build and Run') + '\n';
        const commands = getBuildRunCommands().split('\n');
        commands.forEach(cmd => {
            dockerfile += '# ' + cmd + '\n';
        });
    }
    
    return dockerfile;
}

// プレビューを更新
function updatePreview() {
    const dockerfile = generateDockerfile();
    const preview = document.getElementById('preview');
    preview.innerHTML = `<code>${escapeHtml(dockerfile)}</code>`;
    
    // キャンバスの状態を更新
    const canvas = document.getElementById('canvas');
    const canvasBlocks = canvas.querySelectorAll('.canvas-block');
    
    if (canvasBlocks.length > 0) {
        canvas.classList.add('has-blocks');
    } else {
        canvas.classList.remove('has-blocks');
    }
    
    // FROMプロンプトを更新
    if (typeof updateFromPrompt === 'function') {
        updateFromPrompt();
    }
}

// HTMLエスケープ
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// プレビューボタンのクリックハンドラ
function handlePreviewClick() {
    updatePreview();
    
    // プレビューパネルにスクロール（モバイル対応）
    const previewPanel = document.querySelector('.preview-panel');
    previewPanel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// コピーボタンのクリックハンドラ
function handleCopyClick() {
    const dockerfile = generateDockerfile();
    
    navigator.clipboard.writeText(dockerfile).then(() => {
        const copyBtn = document.getElementById('copyBtn');
        const originalText = copyBtn.innerHTML;
        const successText = typeof t === 'function' ? t('copy_success') : 'コピーしました！';
        copyBtn.innerHTML = '✅ ' + successText;
        copyBtn.style.background = '#CC0000';
        
        setTimeout(() => {
            copyBtn.innerHTML = originalText;
            copyBtn.style.background = '';
        }, 2000);
    }).catch(err => {
        const lang = typeof getCurrentLanguage === 'function' ? getCurrentLanguage() : 'ja';
        const errorMsg = lang === 'ja' ? 'コピーに失敗しました: ' : 'Copy failed: ';
        alert(errorMsg + err);
    });
}

// ダウンロードボタンのクリックハンドラ
function handleDownloadClick() {
    const dockerfile = generateDockerfile();
    
    // Blobを作成
    const blob = new Blob([dockerfile], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    // ダウンロードリンクを作成
    const a = document.createElement('a');
    a.href = url;
    a.download = 'Dockerfile';
    document.body.appendChild(a);
    a.click();
    
    // クリーンアップ
    setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }, 100);
    
    // ボタンのフィードバック
    const downloadBtn = document.getElementById('downloadBtn');
    const originalText = downloadBtn.innerHTML;
    const successText = typeof t === 'function' ? t('download_success') : 'ダウンロードしました！';
    downloadBtn.innerHTML = '✅ ' + successText;
    
    setTimeout(() => {
        downloadBtn.innerHTML = originalText;
    }, 2000);
}

// クリアボタンのクリックハンドラ
function handleClearClick() {
    if (Object.keys(canvasBlocksData).length === 0) {
        return;
    }
    
    const confirmMsg = typeof t === 'function' ? t('clear_confirm') : 'すべてのブロックを削除しますか？';
    const confirmed = confirm(confirmMsg);
    if (confirmed) {
        canvasBlocksData = {};
        const canvas = document.getElementById('canvas');
        canvas.innerHTML = '<div class="canvas-placeholder">ブロックをここにドラッグしてContainerfileを作成しよう！</div>';
        canvas.classList.remove('has-blocks');
        
        updatePreview();
        
        // FROMプロンプトを表示
        if (typeof updateFromPrompt === 'function') {
            updateFromPrompt();
        }
    }
}

// イベントリスナーを設定
function initializePreview() {
    document.getElementById('previewBtn').addEventListener('click', handlePreviewClick);
    document.getElementById('copyBtn').addEventListener('click', handleCopyClick);
    document.getElementById('downloadBtn').addEventListener('click', handleDownloadClick);
    document.getElementById('clearBtn').addEventListener('click', handleClearClick);
}

